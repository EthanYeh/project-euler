"""
Pentagonal numbers are generated by the formula, 
P_n = n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, 
for which their sum and difference are pentagonal
 and D = |Pk − Pj| is minimised; what is the value of D?
"""


# NOTICE THE DIFFERENCE INCREASES BY 3 EACH TIME.

import time as t

def pent_gen():
    """ Efficiently generates successive pentagonal numbers. Woooo. """
    n = 1
    val = 1
    diff  = 1
    while True:
        if diff == 1:
            yield val, 0
        else:
            yield val, diff
        diff += 3
        val += diff
        n += 1

def isPent(n):
    """ Takes in a number N and checks if it is a pentagon number.
    Solves the quadratic equation and see if solution is a positive integer.
    P_n = n(3n−1)/2. Constant time."""

    c = -2 * n
    a = 3
    b = -1

    r1 = (-1 * b + (b**2 - 4*a*c)**(1/2))/2/a
    r2 = (-1 * b - (b**2 - 4*a*c)**(1/2))/2/a

    return (r1 % 1 == 0 and r1 > 1) or (r2 % 1 == 0 and r2 > 1)

def main():
    start = t.time()
    pg = pent_gen()
    prev = 2
    differences = []
    while True: 
        num, diff = next(pg)
        differences.append(diff)
        newdif = 0
        for i in differences[::-1]:
            newdif = newdif + i
            if isPent(newdif) and isPent(num) and isPent(num - newdif) and isPent(num + num - newdif):
                print(f"Found a difference that is pentagonal, {newdif}, this is the answer.")
                print(f"the numbers are {num} and {num + num - newdif}")
                print(f"This took {t.time() - start} seconds to run")
                return

# Answer is 5482660
# Runs in 4.5 seconds
# Completed on 12/18/2018
